name: 🚀 Build & Deploy (board-api)

on:
  push:
    branches: [ "main" ]  # 필요하면 브랜치 수정

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    env:
      IMAGE_NAME: reha0124/farmsystem-be
      CONTAINER_NAME: board_api

    steps:
      # 1) 코드 체크아웃
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) JDK 21 설정
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      # 3) Gradle 캐시(선택)
      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      # 4) 빌드 (테스트 스킵은 필요에 따라)
      - name: Build with Gradle (skip tests)
        run: ./gradlew clean build -x test

      # 5) Docker Hub 로그인
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 6) Docker 이미지 빌드 & 푸시
      - name: Build & Push Docker image
        env:
          IMAGE_NAME: reha0124/farmsystem-be
        run: |
          docker build -f Dockerfile -t $IMAGE_NAME:${{ github.sha }} .
          docker tag $IMAGE_NAME:${{ github.sha }} $IMAGE_NAME:latest
          docker push $IMAGE_NAME:${{ github.sha }}
          docker push $IMAGE_NAME:latest


      # 7) EC2에 배포 (docker-compose 사용)
      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          envs: DOCKER_USERNAME, JWT_SECRET
          script: |
            set -e

            echo "[1/4] Docker 로그인"
            echo "${{ secrets.DOCKER_PASSWORD }}" | sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            echo "[2/4] Docker-Compose 파일로 컨테이너 재시작"
            cd ~/board
            # 기존 컨테이너를 강제로 중지하고 제거
            sudo docker-compose down -v --remove-orphans

            # 2-1) board-api 컨테이너를 한 번 더 강제로 제거 (혹시 남아있을 경우)
            sudo docker rm -f 76c02ee1df47 || true

            # 2-2) 이미지 삭제. || true를 추가하여 에러 발생 시에도 스크립트가 중단되지 않도록 함
            sudo docker rmi ${{ secrets.DOCKER_USERNAME }}/farmsystem-be:latest || true
            sudo docker rmi postgres:15-alpine || true
            sudo docker rmi redis:7-alpine || true

            # 환경 변수를 명시적으로 전달하며 docker-compose up 실행
            sudo DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }} JWT_SECRET=${{ secrets.JWT_SECRET }} docker-compose up -d

            echo "[3/4] 애플리케이션 로그 확인"
            sleep 30
            sudo docker-compose logs --tail 50 board-api || true
            
            echo "[4/4] 오래된 이미지 정리"
            sudo docker image prune -f
