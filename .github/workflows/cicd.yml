name: 🚀 Build & Deploy (board-api)

on:
  push:
    branches: [ "main" ]  # 필요하면 브랜치 수정

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    env:
      IMAGE_NAME: reha0124/farmsystem-be
      CONTAINER_NAME: board_api

    steps:
      # 1) 코드 체크아웃
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) JDK 21 설정
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      # 3) Gradle 캐시(선택)
      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      # 4) 빌드 (테스트 스킵은 필요에 따라)
      - name: Build with Gradle (skip tests)
        run: ./gradlew clean build -x test

      # 5) Docker Hub 로그인
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 6) Docker 이미지 빌드 & 푸시
      - name: Build & Push Docker image
        env:
          IMAGE_NAME: reha0124/farmsystem-be
        run: |
          docker build -f Dockerfile -t $IMAGE_NAME:${{ github.sha }} .
          docker tag $IMAGE_NAME:${{ github.sha }} $IMAGE_NAME:latest
          docker push $IMAGE_NAME:${{ github.sha }}
          docker push $IMAGE_NAME:latest


      # 7) EC2에 배포 (환경변수로 주입)
      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}          # Elastic IP 또는 Public DNS (Elastic IP 권장)
          username: ubuntu                       # AMI에 따라 ec2-user 등일 수 있음
          key: ${{ secrets.EC2_PRIVATE_KEY }}    # .pem 파일 내용 전체
          envs: IMAGE_NAME,CONTAINER_NAME
          script: |
            set -e

            echo "[1/5] Docker 로그인"
            echo "${{ secrets.DOCKER_PASSWORD }}" | sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            echo "[2/5] 환경파일(.env) 생성/갱신"
            mkdir -p ~/board
            cat > ~/board/.env << 'EOF'
            SPRING_PROFILES_ACTIVE=${{ secrets.SPRING_PROFILES_ACTIVE }}
            SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }}
            SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}
            SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            EOF

            echo "[3/5] 최신 이미지 pull"
            sudo docker pull $IMAGE_NAME:latest

            echo "[4/5] 기존 컨테이너 중지/삭제 후 재기동"
            sudo docker stop ${CONTAINER_NAME} || true
            sudo docker rm ${CONTAINER_NAME} || true

            # 8080 공개, .env로 환경변수 주입, 프로필 기본 prod
            sudo docker run -d --name ${CONTAINER_NAME} \
              --env-file ~/board/.env \
              -p 8080:8080 \
              --restart always \
              $IMAGE_NAME:latest

            echo "[5/5] 오래된 이미지 정리"
            sudo docker image prune -f
